/***********************************************************************
 * Distributed under the MIT software license, see the accompanying    *
 * file COPYING or https://www.opensource.org/licenses/mit-license.php.*
 ***********************************************************************/

#ifndef SECP256K1_MODULE_SILENTPAYMENTS_TESTS_H
#define SECP256K1_MODULE_SILENTPAYMENTS_TESTS_H

#include "../../../include/secp256k1_silentpayments.h"
#include "include/secp256k1.h"

/** Constants
 *
 *  Addresses: scan and spend public keys for Bob and Carol
 *     Seckey: secret key for Alice
 *    Outputs: generated outputs from Alice's secret key and Bob/Carol's
 *             scan public keys
 *     orderc: a scalar which overflows the secp256k1 group order
 *
 *  Constants for smallest outpoint, msg, and auxiliary data are also provided
 *  for convenience. These constants (with the exception of msg and aux) are used
 *  for testing behavior not covered by the BIP352 test vectors, e.g., API argument parsing.
 *
 *  The values themselves are not important.
 */
static unsigned char ORDERC[32] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
    0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b,
    0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x41
};
static unsigned char BOB_ADDRESS[2][33] = {
    {
        0x02,0x15,0x40,0xae,0xa8,0x97,0x54,0x7a,
        0xd4,0x39,0xb4,0xe0,0xf6,0x09,0xe5,0xf0,
        0xfa,0x63,0xde,0x89,0xab,0x11,0xed,0xe3,
        0x1e,0x8c,0xde,0x4b,0xe2,0x19,0x42,0x5f,0x23
    },
    {
        0x02,0x3e,0xff,0xf8,0x18,0x51,0x65,0xea,
        0x63,0xa9,0x92,0xb3,0x9f,0x31,0xd8,0xfd,
        0x8e,0x0e,0x64,0xae,0xf9,0xd3,0x88,0x07,
        0x34,0x97,0x37,0x14,0xa5,0x3d,0x83,0x11,0x8d
    }
};
static unsigned char CAROL_ADDRESS[2][33] = {
    {
        0x03,0xbb,0xc6,0x3f,0x12,0x74,0x5d,0x3b,
        0x9e,0x9d,0x24,0xc6,0xcd,0x7a,0x1e,0xfe,
        0xba,0xd0,0xa7,0xf4,0x69,0x23,0x2f,0xbe,
        0xcf,0x31,0xfb,0xa7,0xb4,0xf7,0xdd,0xed,0xa8
    },
    {
        0x03,0x81,0xeb,0x9a,0x9a,0x9e,0xc7,0x39,
        0xd5,0x27,0xc1,0x63,0x1b,0x31,0xb4,0x21,
        0x56,0x6f,0x5c,0x2a,0x47,0xb4,0xab,0x5b,
        0x1f,0x6a,0x68,0x6d,0xfb,0x68,0xea,0xb7,0x16
    }
};
static unsigned char BOB_OUTPUT[32] = {
    0x46,0x0d,0x68,0x08,0x65,0x64,0x45,0xee,
    0x4d,0x4e,0xc0,0x8e,0xba,0x8a,0x66,0xea,
    0x66,0x8e,0x4e,0x12,0x98,0x9a,0x0e,0x60,
    0x4b,0x5c,0x36,0x0e,0x43,0xf5,0x5a,0xfa
};
static unsigned char CAROL_OUTPUT_ONE[32] = {
    0xb7,0xf3,0xc6,0x79,0x30,0x4a,0xef,0x8c,
    0xc0,0xc7,0x61,0xf1,0x00,0x99,0xdd,0x7b,
    0x20,0x65,0x20,0xd7,0x11,0x6f,0xb7,0x91,
    0xee,0x74,0x54,0xa2,0xfc,0x22,0x79,0xf4
};
static unsigned char CAROL_OUTPUT_TWO[32] = {
    0x4b,0x81,0x34,0x5d,0x53,0x89,0xba,0xa3,
    0xd8,0x93,0xe2,0xfb,0xe7,0x08,0xdd,0x6d,
    0x82,0xdc,0xd8,0x49,0xab,0x03,0xc1,0xdb,
    0x68,0xbe,0xc7,0xe9,0x2a,0x45,0xfa,0xc5
};
static unsigned char SMALLEST_OUTPOINT[36] = {
    0x16,0x9e,0x1e,0x83,0xe9,0x30,0x85,0x33,0x91,
    0xbc,0x6f,0x35,0xf6,0x05,0xc6,0x75,0x4c,0xfe,
    0xad,0x57,0xcf,0x83,0x87,0x63,0x9d,0x3b,0x40,
    0x96,0xc5,0x4f,0x18,0xf4,0x00,0x00,0x00,0x00
};
static unsigned char ALICE_SECKEY[32] = {
    0xea,0xdc,0x78,0x16,0x5f,0xf1,0xf8,0xea,
    0x94,0xad,0x7c,0xfd,0xc5,0x49,0x90,0x73,
    0x8a,0x4c,0x53,0xf6,0xe0,0x50,0x7b,0x42,
    0x15,0x42,0x01,0xb8,0xe5,0xdf,0xf3,0xb1
};
/* sha256("message") */
static unsigned char MSG32[32] = {
    0xab,0x53,0x0a,0x13,0xe4,0x59,0x14,0x98,
    0x2b,0x79,0xf9,0xb7,0xe3,0xfb,0xa9,0x94,
    0xcf,0xd1,0xf3,0xfb,0x22,0xf7,0x1c,0xea,
    0x1a,0xfb,0xf0,0x2b,0x46,0x0c,0x6d,0x1d
};
/* sha256("random auxiliary data") */
static unsigned char AUX32[32] = {
    0x0b,0x3f,0xdd,0xfd,0x67,0xbf,0x76,0xae,
    0x76,0x39,0xee,0x73,0x5b,0x70,0xff,0x15,
    0x83,0xfd,0x92,0x48,0xc0,0x57,0xd2,0x86,
    0x07,0xa2,0x15,0xf4,0x0b,0x0a,0x3e,0xcc
};

void run_silentpayments_tests(void) {
    CHECK(1);
}

#endif
